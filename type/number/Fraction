>>> from fractions import Fraction
	>>> x = Fraction(1, 3) 
>>> y = Fraction(4, 6)
>>> x 
Fraction(1, 3) 
>>> y 
Fraction(2, 3) 
>>> print(y) 
2/3


>>> 0.1 + 0.1 + 0.1 - 0.3 # Должен быть получен ноль (близко, но не точно) 5.5511151231257827e-17
>>> from fractions import Fraction
>>> Fraction(1, 10) + Fraction(1, 10) + Fraction(1, 10) - Fraction(3, 10) Fraction(0, 1)
>>> from decimal import Decimal
>>> Decimal(‘0.1’) + Decimal(‘0.1’) + Decimal(‘0.1’) - Decimal(‘0.3’) Decimal(‘0.0’)

	>>> (2.5).as_integer_ratio() (5, 2)
# метод объекта типа float
# Пеобразование float -> fraction:
# два аргумента
# То же самое, что и Fraction(5, 2)
# x – из предыдущего примера сеанса
# 5/2 + 1/3 = 15/6 + 2/6
# Преобразование fraction -> float
# Преобразование float -> fraction: # другой способ
>>> f
>>> z
>>> z Fraction(5, 2)
= 2.5
= Fraction(*f.as_integer_ratio())
>>> x Fraction(1, 3) >>> x + z Fraction(17, 6)
>>> float(x) 0.33333333333333331
>>> float(z) 2.5
>>> float(x + z) 2.8333333333333335 >>> 17 / 6 2.8333333333333335
>>> Fraction.from_float(1.75) Fraction(7, 4)
>>> Fraction(*(1.75).as_integer_ratio()) Fraction(7, 4)



>>> 4.0 / 3
1.3333333333333333
>>> (4.0 / 3).as_integer_ratio() (6004799503160661, 4503599627370496)
# Произойдет потеря точности
>>> x
Fraction(1, 3)
>>> a = x + Fraction(*(4.0 / 3).as_integer_ratio()) >>> a
Fraction(22517998136852479, 13510798882111488)
>>> 22517998136852479 / 13510798882111488. # 5 / 3 (или близкое к нему!) 1.6666666666666667
>>> a.limit_denominator(10) # Упростить до ближайшего рационального Fraction(5, 3)


